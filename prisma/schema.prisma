// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id           String     @id @default(uuid())
  originId    String  @unique
  name        String
  title       String  @default("interior design article")
  company     String
  description String
  featured   Boolean
  image       String
  price       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  clerkId  String
  // imageUrl  String
  // relacja jeden do wielu, w której produkt może być u wielu ulubionym
  favorites Favorite[]
  // relacja jeden do wielu, w której produkt może mieć wiele recenzji
  reviews Review[]
  cartItems CartItem[]
  // cartItemsNew CartItem[] @relation("productNew")
  images String  @default("https://upload.wikimedia.org/wikipedia/en/d/d6/Image_coming_soon.png")
  prices String  
  colors String  
  color String
  category String
  type String    @default("product")
  productJson String?
}

model Favorite {
  id        String   @id @default(uuid())
  clerkId  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  // idApi  String
  clerkId  String
  rating Int
  comment String
  authorName String
  authorImageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Cart {
  id        String   @id @default(uuid())
  clerkId  String
  cartItems CartItem[] 
  numItemsInCart Int @default(0)
  cartTotal Int @default(0)
  shipping Int @default(5)
  tax Int @default(0)
  taxRate Float @default(0.1)
  orderTotal Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model CartItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  // productOrigin   Product?  @relation(fields: [productId], references: [originId], onDelete: Cascade)
  productId String
  cart     Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId   String
  amount  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color String 
  price Int 
  image String
  name String

  // orderCart Order @relation(fields: [id], references: [id], onDelete: Cascade)
  // orderCartId String
}

model Order {
  id        String   @id @default(uuid())
  clerkId  String
  products Int  @default(0)
  orderTotal Int @default(0)
  cartTotal Int @default(0)
  tax Int @default(0)
  shipping Int @default(0)
  email String
  // isPaid Boolean @default(true)  
  isPaid Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderItemsJson String
  // orderCartItems CartItem[]
  
  // addressCountry String
  // addressCity String
  // addressStreet String
  // addressStreetNumber String
  // addressCode String
  // phoneNumber  String
}